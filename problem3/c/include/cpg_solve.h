
/*
Auto-generated by CVXPYgen on January 30, 2024 at 06:19:45.
Content: Function declarations.
*/

#include "cpg_workspace.h"

// Update user-defined parameter values
extern void cpg_update_q(cpg_int idx, cpg_float val);
extern void cpg_update_r_0(cpg_int idx, cpg_float val);
extern void cpg_update_v_0(cpg_int idx, cpg_float val);
extern void cpg_update_m_0(cpg_float val);
extern void cpg_update_t_f_A(cpg_int idx, cpg_float val);
extern void cpg_update_t_f_B(cpg_int idx, cpg_float val);
extern void cpg_update_t_f_B_g(cpg_int idx, cpg_float val);
extern void cpg_update_alpha(cpg_float val);
extern void cpg_update_theta_cos(cpg_float val);
extern void cpg_update_n_hat(cpg_int idx, cpg_float val);
extern void cpg_update_v_max(cpg_float val);
extern void cpg_update_c(cpg_int idx, cpg_float val);
extern void cpg_update_c_q(cpg_int idx, cpg_float val);
extern void cpg_update_rho_2_exp_z_0(cpg_int idx, cpg_float val);
extern void cpg_update_rho_2_exp_z_0_z_0(cpg_int idx, cpg_float val);
extern void cpg_update_rho_1_exp_z_0(cpg_int idx, cpg_float val);
extern void cpg_update_rho_1_exp_z_0_z_0(cpg_int idx, cpg_float val);

// Map user-defined to canonical parameters
extern void cpg_canonicalize_A();
extern void cpg_canonicalize_b();

// Retrieve primal solution in terms of user-defined variables
extern void cpg_retrieve_prim();

// Retrieve dual solution in terms of user-defined constraints
extern void cpg_retrieve_dual();

// Retrieve solver information
extern void cpg_retrieve_info();

// Solve via canonicalization, canonical solve, retrieval
extern void cpg_solve();

// Update solver settings
extern void cpg_set_solver_default_settings();
extern void cpg_set_solver_max_iter(cpg_int max_iter_new);
extern void cpg_set_solver_time_limit(cpg_float time_limit_new);
extern void cpg_set_solver_verbose(cpg_int verbose_new);
extern void cpg_set_solver_max_step_fraction(cpg_float max_step_fraction_new);
extern void cpg_set_solver_equilibrate_enable(cpg_int equilibrate_enable_new);
extern void cpg_set_solver_equilibrate_max_iter(cpg_int equilibrate_max_iter_new);
extern void cpg_set_solver_equilibrate_min_scaling(cpg_float equilibrate_min_scaling_new);
extern void cpg_set_solver_equilibrate_max_scaling(cpg_float equilibrate_max_scaling_new);
